Questions

Answer the following questions in your answers-lab3.txt:

1. What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)
Ans: By having individual handler function for each exception/interrupt, the kernel is able to config different privlege levels for different interrupt/exception.

2. Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint's code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint's int $14 instruction to invoke the kernel's page fault handler (which is interrupt vector 14)?
Ans: No. Because CPL(from user program = 3) is bigger than DPL(0), thus a general protection fault will be generated. 

3. The break point test case will either generate a break point exception or a general protection fault depending on how you initialized the break point entry in the IDT (i.e., your call to SETGATE from trap_init). Why? How do you need to set it up in order to get the breakpoint exception to work as specified above and what incorrect setup would cause it to trigger a general protection fault?
Ans: This is because DPL is set thru SETGATE macro. If DPL is set to 0, user program does not have privilege to call the interrupt handler, thus a general protection falut will trigger. If DPL is set to 3, user program is able to pass the privilege check (CPL <= DPL), and call into the interrupt handler.

4. What do you think is the point of these mechanisms, particularly in light of what the user/softint test program does?
Ans: These are protection mechanisms. They aim to verify memory accesses and instruction execution.

